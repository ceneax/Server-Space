package router

import (

	// docs is generated by Swag CLI, you have to import it.

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"     // swagger embed files
	ginSwagger "github.com/swaggo/gin-swagger" // gin-swagger middleware
	"xcdh.space/space/config"
	_ "xcdh.space/space/docs"
	"xcdh.space/space/router/apiv1"
	"xcdh.space/space/router/middleware/ginjwt"
	"xcdh.space/space/router/middleware/loger"
)

func Run() {
	if config.RunMode == "release" {
		gin.SetMode(gin.ReleaseMode)
		gin.DisableConsoleColor()
	}
	r := gin.New()
	// 全局中间件
	// 使用 Logger 中间件
	if config.RunMode == "release" {
		r.Use(loger.LogerMiddleware())
	} else {
		r.Use(gin.Logger())
	}

	// 使用 Recovery 中间件
	r.Use(gin.Recovery())

	authMiddleware := ginjwt.GinJWTMiddlewareInit()
	v1 := r.Group("/v1")
	v1.GET("/refresh_toekn", ginjwt.RefreshHandler(authMiddleware))
	v1.POST("register", apiv1.Register)
	v1.GET("/section/all", apiv1.GetAllSection)
	v1.GET("/topic/get", apiv1.GetTopic)
	v1.GET("/topic/content/get", apiv1.GetTopicContent)
	v1.GET("/comment/get", apiv1.GetComment)
	v1.GET("/reply/get", apiv1.GetReply)
	v1.POST("/login", ginjwt.LoginHandler(authMiddleware))

	v1.Use(authMiddleware.MiddlewareFunc())
	{
		user := v1.Group("user")
		user.GET("info/:userid", apiv1.GetUserInfo)
		user.POST("updateinfo", apiv1.UpdateUserInfo)
		user.POST("updatepass", apiv1.UpdateUserPassword)
		user.POST("evaluate", apiv1.SetEvaluate)
		user.POST("favorite", apiv1.SetFavorite)
		section := v1.Group("/section")
		section.GET("add", apiv1.AddSection)
		topic := v1.Group("/topic")
		topic.GET("get/:userid", apiv1.GetTopicInUser)
		topic.POST("add", apiv1.AddTopic)
		topic.POST("update", apiv1.UpdateTopic)
		topic.POST("delete", apiv1.DeleteTopic)
		comment := v1.Group("/comment")
		comment.GET("get/:userid", apiv1.GetCommentUser)
		comment.POST("add", apiv1.AddComment)
		comment.POST("update", apiv1.UpdateComment)
		comment.POST("delete", apiv1.DeleteComment)
		reply := v1.Group("/reply")
		reply.GET("get/:userid", apiv1.GetReplyUser)
		reply.POST("add", apiv1.AddReply)
		reply.POST("update", apiv1.UpdateReply)
		reply.POST("delete", apiv1.DeleteReply)
		notice := v1.Group("/notice")
		notice.GET(":userid", apiv1.GetNotice)
		v1.GET("noticeread/:userid", apiv1.SetNoticeRead)
	}
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	r.Run()
}
